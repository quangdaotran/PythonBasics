### Data Types:

## Integer:
# Decimal base:
12
# Binary base:
0b10 ( = 2)
# Octal base (0 to 7):
0o10  ( = 8)
# Hexadecimal base (0...9, A ... F):
0x5D8 ( = 1496)

## Floating:
4.2
2e2 ( = 200)
2e-2 ( = 0.02)
5+3j ( = 5+3j) # with j = sqrt(-1)

## String:
'Hello world' ( ' is the same as ")
'Hello' + 'World' ( = Helloworld) # with + as concatenate strings
print('Hello\nWorld') ( \n break the line)
print('a\\b') ( = a\b) # useful when writing file path
print('The quotation character is (\')') ( = The quotation character is ('))
print('The quotation character is (+)') ( = The quotation character is (+))
***
age = 20
name = 'Swaroop'
print('{} was {} years old when he wrote this book'.format(name, age)) # format function
print('Why is {} playing with that python?'.format(name))
print('{0:.4f}'.format(2/3)) ( = 0.6667)
print('{0:_^15}'.format('hello')) ( = _____hello_____)
print(r'j and r\n') ( = j and r\n) # use 'r' before strings to indicate raw strings

## Boolean:
10 > 9 ( = True)
10 == 9 ( = False)
bool('Hello') ( = True)
bool(15) ( = True)

*************************

### Math Operators:
3+4 ( = 7)
3-4 ( = -1)
3*4 ( =12)
5/2 ( =2.5)
5//2 ( =2) # floor division
-9//4 ( =-3) # floor division for negative number
5%2 ( =1) # modulus
-9%4 ( =3) # modulus for negative number
5**2 ( =25) # power

*************************

### Assignment operators:
x= 8
x= x+5 # the same as x += 5

*************************

### Logical operators (results as True/ False - Boolean):
9 > 8 ( = True)
a > b ( remember to assign values for a and b first)
a == b
a != b # compare if different
'catt' == 'cat' ( = False)
(a > 0) and (b > 0) ( = True if both conditions are true)
(a < 0) or (b > 0) ( = True if at least one condition is true)
not(8 > 9) ( = True) # this is negative operator

*************************

### Math Functions:
abs(-8) ( =8) # return absolute value of a number
divmod(26,6) ( =(4,2)) # return quotient and remainder of integer division
max(3, 1, 2) ( =3) # can be used for words, sorting based on the first letters
min(3, -3, 1, 2, -5) ( =-5) # can be used for words, sorting based on the first letters
pow(2,3) ( =8) # the same as 2**3
round(-4.568, 1) ( =-4.6) # round a floating-point value to a given position
sum( [5,8] ) ( =13) # sum the items of an iterable
sum( [5,8,14] ) ( =27)

*************************

### Data Structures (Sequence)
## Lists:
a = [1, 2 ,3 ,4]
a[2]  ( =3)
b = ['dog', 25, a, False, 'a'] # a list can store various data-type items
c = [5,6,7,8]
a+c ( = [1,2,3,4,5,6,7,8] ) # appends values of the second list to the first one's 
a += [4, 7] ( = [1,2,3,4,4,7] ) # append new values to the end of the list
a*2 ( = [1,2,3,4,4,7,1,2,3,4,4,7] ) # the same as a+a
c.append('dog') ( = [5,6,7,8,'dog'] ) # add new item to the list

d = [1,2,3]
e = [4,5,6]
  d.append(e) ( = [1,2,3, [4,5,6] ] ) # add the second list to the last position of the first list
  d[3] ( = [4,5,6] )
  ***
  d.extend(e) ( = [1,2,3,4,5,6] ) # the same as d+e
  d[3] ( = 4)
  ***
  d.insert(1,6) ( = [1,6,2,3] ) # insert 6 at the position 1
  ***
  d.remove(1) ( = [2,3] ) # remove the first occurence of element '1'
  ***
  d.pop() ( = [1,2] ) # remove the last element of the list
  ***
  d.pop(1) ( = [1,3] ) # remove the second element
  ***
  d.reverse() ( = [3,2,1] )
  ***
  d.count(1) ( = 1) # count the number of element '1'
  ***
  d.sort(reverse = True) ( = [3,2,1] ) # sort the numbers (all types of number) or words (first letters), which are elements of the list in descendant order; 'reverse = False' or nothing inside () mean ascendant order
  ***
  d[0:2] ( = 2) # the same as d[1], meaning call the elements between position 0 and 2
  ***
  d[::2] ( = [1,3] ) # slice with position + 2 (0,2,4,...)
  ***
  f = d
  f.append(7)
  print(d) ( = [1,2,3,7] ) # lists can be referenced
  ***
  f = d[:]
  f.append(7)
  print(d) ( = [1,2,3] ) # shallow copy, works well with one dimension lists
  ***
  d.append(e) ( = [1,2,3, [4,5,6] ] )
  f = d[:]
  f[1] = 'dao'
  print(d) ( = [1,2,3, [4,5,6] ] )
  f[3][0] = 'dao'
  print(d) ( = [1,2,3, ['dao',5,6] ] ) # be careful with complex lists
  
## Tuples:
a = (1,2,3,4) # the same as a = 1,2,3,4 because tuples do not need parenthesis
a[2] ( = 3)
a[3] = 5 (Error) # tuples' element can not be changed
x,y,z,k = a
print(x) ( =1)
print(y) ( =2)
print(z) ( =3)
print(k) ( =4)
***
b = 1
c = 2
a = (b,c)
print(a) ( = (1,2) )
***
a = (1,2,3,[5,6]) # a tuple with a list inside
a[3][0] = 7 # elements of a list, which is inside a tuple, can be changed but the list itself can not be replaced
b = [1,2,3,(5,6)] # a list with a tuple inside
b[3][0] = 7 (error)
b[3] = 4 (good) # a tuple inside a list can be replaced
***
a = ('ant','bee','cat')
max(a) ( = 'cat')

**************************

### Conditionals: 
## if, else and elif:
a = 'Cat'
b = 'Cat'
if a == b:
    print('They are the same')
else:
    print('They are different')
***
a = [ 2, 3, 4]
if (a[0] < a[1]) & (a[0] < a[2]):     # '&' can be replaced by 'and'
    print('The lowest value is:' , a[0])
else:
    if a[1] < a[2]: #Nested statement
        print('The lowest value is:' , a[1])
    else:
        print('The lowest value is:' , a[2])   
    
## while:
i = 0
while i < 10:
  i += 1
  if i == 7:
    break      # Terminate the cycle and move down to the next block
    print(i)
print('While statement was completed')
***
i = 0
while i < 10:
    i += 1
    if i == 7:
        continue  # Stop the cycle and go back to the while, skip value '7'
    print(i)
print('While statement was completed')
***
a = [10, 8, 9, 7, 5, 11, 6, 1, 4]  # a list of numbers
n = 12 # Number to be found
Completed = False # Status of the proces
i = 0
while Completed == False:
    if i < len(a):
        if n == a[i]:
            print(n, 'is in the list at position:', i)
            Completed = True # The condition has been fulfilled
    else:
        print(n, 'is not in the list')
        Completed = True
    i += 1
    
******************************

### Loops:
## for:
a = [1, 'cat', 6, (9, 7)]
for i in a:
    print(i)

******************************

### Random:
import random as rnd
for i in range(5):
  print(rnd.random()) # generates random numbers from 0 to 1 uniformly distributed
  print(rnd.randint(0,50)) # Integer random numbers between two values
***
x = [1,10,4,5,6,7,8] 
print(rnd.choice(x)) # randomly pick an element of the list
print(rnd.sample(x,4)) # randomly pick 4 elements of the list
print(rnd.randrange(1, 11, 5) # randomly pick a number between 1 and 10 (11 as the last number is not included in Python), with step = 5
***
rnd.seed(1)
rnd.seed()
***
print(rnd.uniform(10,20)) # randomly pick a uniform distribution value between 10 and 19
print(rnd.triangular(5, 8, 15)) # triangle distribution
print(rnd.betavariate(1,9)) # beta distribution with alpha = '1' & beta = '9'
print(rnd.expovariate(5)) # exponential distribution (1/lambda)
print(rnd.gauss(10, 3)) # normal distribution by gauss (faster) with mu, sigma
print(rnd.normalvariate(10, 3)) # normal distribution with mu, sigma
print(rnd.lognormvariate(10, 3)) # lognormal(mu, sigma)
print(rnd.paretovariate(10)) # pareto(alpha)
print(rnd.gammavariate(5, 8)) # gamma(alpha, beta)
print(rnd.weibullvariate(5, 8)) # weibull(alpha, beta)
