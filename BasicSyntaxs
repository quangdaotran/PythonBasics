### Data Types:

## Integer:
# Decimal base:
12
# Binary base:
0b10 ( = 2)
# Octal base (0 to 7):
0o10  ( = 8)
# Hexadecimal base (0...9, A ... F):
0x5D8 ( = 1496)

## Floating:
4.2
2e2 ( = 200)
2e-2 ( = 0.02)
5+3j ( = 5+3j) with j = sqrt(-1)

## String:
'Hello world' ( ' is the same as ")
'Hello' + 'World' ( = Helloworld) with + as concatenate strings
print('Hello\nWorld') ( \n break the line)
print('a\\b') ( = a\b) useful when writing file path
print('The quotation character is (\')') ( = The quotation character is ('))
print('The quotation character is (+)') ( = The quotation character is (+))

## Boolean:
10 > 9 ( = True)
10 == 9 ( = False)
bool('Hello') ( = True)
bool(15) ( = True)

*************************

### Math Operators:
3+4 ( = 7)
3-4 ( = -1)
3*4 ( =12)
5/2 ( =2.5)
5//2 ( =2) floor division
-9//4 ( =-3) floor division for negative number
5%2 ( =1) modulus
-9%4 ( =3) modulus for negative number
5**2 ( =25) power

*************************

### Assignment operators:
x= 8
x= x+5 the same as x += 5

*************************

### Logical operators (results as True/ False - Boolean):
9 > 8 ( = True)
a > b ( remember to assign values for a and b first)
a == b
a != b compare if different
'catt' == 'cat' ( = False)
(a > 0) and (b > 0) ( = True if both conditions are true)
(a < 0) or (b > 0) ( = True if at least one condition is true)
not(8 > 9) ( = True) this is negative operator

*************************

### Math Functions:
abs(-8) ( =8) return absolute value of a number
divmod(26,6) ( =(4,2)) return quotient and remainder of integer division
max(3, 1, 2) ( =3)
min(3, -3, 1, 2, -5) ( =-5)
pow(2,3) ( =8) the same as 2**3
round(-4.568, 1) ( =-4.6) round a floating-point value to a given position
sum( [5,8] ) ( =13) sum the items of an iterable
sum( [5,8,14] ) ( =27)

*************************

### Data Structures (Sequence)
## Lists:
a = [1, 2 ,3 ,4]
a[2]  ( =3)
b = ['dog', 25, a, False, 'a'] a list can store various data-type items
c = [5,6,7,8]
a+c ( = [1,2,3,4,5,6,7,8] ) appends values of the second list to the first one's 
a += [4, 7] ( = [1,2,3,4,4,7] ) append new values to the end of the list
a*2 ( = [1,2,3,4,4,7,1,2,3,4,4,7] ) the same as a+a
c.append('dog') ( = [5,6,7,8,'dog'] ) add new item to the list

d = [1,2,3]
e = [4,5,6]
  d.append(e) ( = [1,2,3, [4,5,6] ] ) add the second list to the last position of the first list
  d[3] ( = [4,5,6] )
  ***
  d.extend(e) ( = [1,2,3,4,5,6] ) the same as d+e
  d[3] ( = 4)






