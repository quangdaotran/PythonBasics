### There are four built-in data structures in Python: list, tuple, dictionary and set.

### List (a type of sequence):
# items of a list are mutable
shoplist = ['apple', 'mango', 'carrot', 'banana']
print('These items are:', end=' ')   # use "end" parameter in the call to "print" fuction to indicate that we want to end the output with a space instead of the usual line break
for item in shoplist:
    print(item, end=' ')
a = [1, 2 ,3 ,4]
a[2]  ( =3)
b = ['dog', 25, a, False, 'a'] # a list can store various data-type items
c = [5,6,7,8]
a+c ( = [1,2,3,4,5,6,7,8] ) # appends values of the second list to the first one's 
a += [4, 7] ( = [1,2,3,4,4,7] ) # append new values to the end of the list
a*2 ( = [1,2,3,4,4,7,1,2,3,4,4,7] ) # the same as a+a
c.append('dog') ( = [5,6,7,8,'dog'] ) # add new item to the list

d = [1,2,3]
e = [4,5,6]
  d.append(e) ( = [1,2,3, [4,5,6] ] ) # add the second list to the last position of the first list
  d[3] ( = [4,5,6] )
  ***
  d.extend(e) ( = [1,2,3,4,5,6] ) # the same as d+e
  d[3] ( = 4)
  ***
  d.insert(1,6) ( = [1,6,2,3] ) # insert 6 at the position 1
  ***
  d.remove(1) ( = [2,3] ) # remove the first occurence of element '1'
  ***
  d.pop() ( = [1,2] ) # remove the last element of the list
  ***
  d.pop(1) ( = [1,3] ) # remove the second element
  ***
  d.reverse() ( = [3,2,1] )
  ***
  d.count(1) ( = 1) # count the number of element '1'
  ***
  d.sort(reverse = True) ( = [3,2,1] ) # sort the numbers (all types of number) or words (first letters), which are elements of the list in descendant order; 'reverse = False' or nothing inside () mean ascendant order
  ***
  d[0:2] ( = 2) # the same as d[1], meaning call the elements between position 0 and 2
  ***
  d[::2] ( = [1,3] ) # slice with position + 2 (0,2,4,...)
  ***
  f = d
  f.append(7)
  print(d) ( = [1,2,3,7] ) # lists can be referenced
  ***
  f = d[:]
  f.append(7)
  print(d) ( = [1,2,3] ) # shallow copy, works well with one dimension lists
  ***
  d.append(e) ( = [1,2,3, [4,5,6] ] )
  f = d[:]
  f[1] = 'dao'
  print(d) ( = [1,2,3, [4,5,6] ] )
  f[3][0] = 'dao'
  print(d) ( = [1,2,3, ['dao',5,6] ] ) # be careful with complex lists

### Tuple (a type of sequence):
# parentheses used in tuples can be optional
# the name assigned to a tuple can be changed but not items inside it
singletuple = (2,)  # create a tuple containing one single item
a = (1,2,3,4) # the same as a = 1,2,3,4 because tuples do not need parenthesis
a[2] ( = 3)
a[3] = 5 (Error) # tuples' element can not be changed
x,y,z,k = a
print(x) ( =1)
print(y) ( =2)
print(z) ( =3)
print(k) ( =4)
***
b = 1
c = 2
a = (b,c)
print(a) ( = (1,2) )
***
a = (1,2,3,[5,6]) # a tuple with a list inside
a[3][0] = 7 # elements of a list, which is inside a tuple, can be changed but the list itself can not be replaced
b = [1,2,3,(5,6)] # a list with a tuple inside
b[3][0] = 7 (error)
b[3] = 4 (good) # a tuple inside a list can be replaced
***
a = ('ant','bee','cat')
max(a) ( = 'cat')

### Dictionary:
# keys in a dictionary are immutable while values can be mutable or not; we should use simple objects for keys
# key-value pairs are separated by a colon and the pairs are separated themselves by commas and all this is enclosed in a pair of curly braces
# key will be used as indexing operator to get its associated value
addressbook = {
'Swaroop': 'swaroop@swaroopch.com',
'Larry': 'larry@wall.org',
'Matsumoto': 'matz@ruby-lang.org',
'Spammer': 'spammer@hotmail.com'
}
print("Swaroop's address is", addressbook['Swaroop'])
for name, address in addressbook.items():    # use "in" operator
    print('Contact {} at {}'.format(name, address))
    
### Sequence (List, Tuple, String...)
# Slicing:
a = [1,2,3,'a','b']
a[1]
a[3]
a[1:3]
a[2:]
a[:4]
a[:]   # everything inside
a[:-1]  # everything except for last item
a[::2]  ( = [1,3,'b'])  # "2" is the step side

### Set:
# unordered collections of simple objects, existence is more important than order
bri = set(['brazil', 'russia', 'india'])
'india' in bri  ( =True)
bric = bri.copy()
bric.add('china')
bric.issuperset(bri)  ( =True)   # is bric larger than/ containing bri
bri.remove('russia')
bri & bric   ( = {'brazil', 'india'})  # same items in both set

### Reference:
1st_list = [1,3,5,7]
2nd_list = 1st_list   # when you change 2nd_list, 1st_list change recordingly
3rd_list = 1st_list[:]   # use ":" to avoid changing the original list
